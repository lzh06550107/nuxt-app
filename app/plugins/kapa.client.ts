// 定义 Kapa AI 小部件的配置参数
const kapa = {
  'key': 'kapa',
  'src': 'https://widget.kapa.ai/kapa-widget.bundle.js', // 小部件脚本地址
  'data-website-id': 'fb3af718-9db2-440d-9da9-14e6c5fca2aa', // 网站唯一标识符
  'data-button-hide': true, // 隐藏默认按钮
  'data-project-name': 'Nuxt', // 项目名称
  'data-project-color': '#00DC82', // 主题颜色
  'data-button-text-color': '#000000', // 按钮文字颜色
  'data-project-logo': 'https://nuxt.com/assets/design-kit/icon-black.svg', // 项目 Logo
  'data-modal-image': 'https://nuxt.com/assets/design-kit/icon-green.svg', // 弹窗图标
  'data-button-padding': '0.5rem', // 按钮内边距
  'data-button-width': '5.5rem', // 按钮宽度
  'data-modal-disclaimer': 'This is a custom LLM for answering questions about Nuxt. Answers are based on the contents of the documentation, GitHub information and Stack Overflow articles. Please note that answers are generated by AI and may not be fully accurate, so please use your best judgement.',
  'data-user-analytics-fingerprint-enabled': 'true', // 弹窗免责声明
  'crossorigin': false // 不使用跨域属性
} as const


// 当 Kapa 弹窗打开时触发
interface OnModalOpenArgs {
  mode: 'search' | 'ai' // 弹窗的打开模式，可以是 'search'（搜索）或 'ai'（AI问答）
}

// 当 Kapa 弹窗关闭时触发
interface OnModalCloseArgs {
  mode: 'search' | 'ai' // 关闭前弹窗所处的模式
}

// 用户提交了一个新问题时触发
interface OnAskAIQuerySubmitArgs {
  threadId: string | null // 对话线程 ID（可能为 null）
  questionAnswerId: string // 问题与回答对的唯一标识
  question: string // 用户提出的问题文本
}

// 用户点击了示例问题时触发
interface OnAskAIExampleQuerySubmitArgs {
  threadId: string | null
  questionAnswerId: string
  question: string
}

// AI 完成一个答案生成后触发
interface OnAskAIAnswerCompletedArgs {
  threadId: string // 当前对话线程 ID
  questionAnswerId: string // 当前问题与回答对的 ID
  question: string // 用户提问内容
  answer: string // AI 生成的回答
  conversation: { questionAnswerId: string, question: string, answer: string }[] // 整个对话历史记录数组
}

// 用户对 AI 回答进行反馈时触发
interface OnAskAIFeedbackSubmitArgs {
  reaction: string // 用户的情绪反应（如“👍”或“👎”）
  comment: { // 用户反馈的具体内容
    issue: string // 问题描述
    irrelevant: boolean // 是否无关
    incorrect: boolean // 是否错误
    unaddressed: boolean // 是否未被解答
  }
  threadId: string
  questionAnswerId: string
  question: string
  answer: string
  conversation: { questionAnswerId: string, question: string, answer: string }[]
}

// 用户点击 AI 回答中的链接时触发
interface OnAskAILinkClickArgs {
  href: string // 被点击的链接地址
  threadId: string
  questionAnswerId: string
  question: string
  answer: string
}

// 用户点击 AI 回答引用的来源时触发
interface OnAskAISourceClickArgs {
  source: {
    title: string
    subtitle: string
    url: string
  }
  threadId: string
  questionAnswerId: string
  question: string
  answer: string
}

// 用户复制 AI 回答内容时触发
interface OnAskAIAnswerCopyArgs {
  threadId: string
  questionAnswerId: string
  question: string
  answer: string
}

// 用户停止 AI 回答生成时触发
interface OnAskAIGenerationStopArgs {
  threadId: string | null // 对话线程 ID
  question: string // 正在生成回答的问题
  conversation: { questionAnswerId: string, question: string, answer: string }[] // 当前对话历史
}

// 用户重置当前对话时触发
interface OnAskAIConversationResetArgs {
  threadId: string
  conversation: { questionAnswerId: string, question: string, answer: string }[]
}

// 用户在搜索和 AI 模式之间切换时触发
interface OnModeSwitchArgs {
  mode: 'search' | 'ai'
}

// 搜索完成并返回结果时触发
interface OnSearchResultsCompletedArgs {
  query: string // 用户的搜索关键词
  searchResults: { title: string, subtitle: string, url: string, sourceName: string }[] // 匹配的搜索结果列表
}

// 用户点击“显示更多搜索结果”按钮时触发
interface OnSearchResultsShowMoreClickArgs {
  query: string
  searchResults: { title: string, subtitle: string, url: string, sourceName: string }[]
}

// 用户点击某个搜索结果时触发
interface OnSearchResultClickArgs {
  query: string // 原始查询词
  searchResult: { title: string, subtitle: string, url: string, sourceName: string } // 被点击的搜索结果
  rank: number // 该结果在搜索结果列表中的排名
}

interface Kapa {
  // 弹窗打开时
  (event: 'onModalOpen', handler: (args: OnModalOpenArgs) => void): void
  // 弹窗关闭时
  (event: 'onModalClose', handler: (args: OnModalCloseArgs) => void): void
  // 用户提交问题时
  (event: 'onAskAIQuerySubmit', handler: (args: OnAskAIQuerySubmitArgs) => void): void
  // 用户点击示例问题时
  (event: 'onAskAIExampleQuerySubmit', handler: (args: OnAskAIExampleQuerySubmitArgs) => void): void
  // AI 回答生成完成时
  (event: 'onAskAIAnswerCompleted', handler: (args: OnAskAIAnswerCompletedArgs) => void): void
  // 用户对回答提交反馈时
  (event: 'onAskAIFeedbackSubmit', handler: (args: OnAskAIFeedbackSubmitArgs) => void): void
  // 用户点击回答中的链接时
  (event: 'onAskAILinkClick', handler: (args: OnAskAILinkClickArgs) => void): void
  // 用户点击引用来源时
  (event: 'onAskAISourceClick', handler: (args: OnAskAISourceClickArgs) => void): void
  // 用户复制回答内容时
  (event: 'onAskAIAnswerCopy', handler: (args: OnAskAIAnswerCopyArgs) => void): void
  // 用户停止 AI 生成时
  (event: 'onAskAIGenerationStop', handler: (args: OnAskAIGenerationStopArgs) => void): void
  // 用户重置对话时
  (event: 'onAskAIConversationReset', handler: (args: OnAskAIConversationResetArgs) => void): void
  // 用户切换搜索/AI模式时
  (event: 'onModeSwitch', handler: (args: OnModeSwitchArgs) => void): void
  // 搜索结果加载完成时
  (event: 'onSearchResultsCompleted', handler: (args: OnSearchResultsCompletedArgs) => void): void
  // 用户点击“显示更多”搜索结果时
  (event: 'onSearchResultsShowMoreClick', handler: (args: OnSearchResultsShowMoreClickArgs) => void): void
  // 用户点击某个搜索结果时
  (event: 'onSearchResultClick', handler: (args: OnSearchResultClickArgs) => void): void
  // 手动打开 Kapa 弹窗
  open(options?: { mode?: 'search' | 'ai', query?: string, submit?: boolean }): void
  // 手动关闭 Kapa 弹窗
  close: () => void
}

/**
 * 在全局 Window 接口上声明 Kapa 类型
 * 使得我们可以在全局 window 对象上访问 Kapa AI 小部件的 API
 */
declare global {
  interface Window {
    /**
     * Kapa AI 小部件的全局实例
     * 在加载外部脚本后由 Kapa 自动注入到 window 对象中
     */
    Kapa: Kapa
  }
}

/**
 * Nuxt 插件：集成 Kapa AI 智能客服小部件
 * 提供 `openModal` 方法用于手动触发搜索或 AI 问答弹窗
 */
export default defineNuxtPlugin(() => {
  // 使用 useScript 异步加载 Kapa 小部件脚本
  const script = useScript<{ Kapa: Kapa }>(kapa, {
    trigger: 'manual', // 手动触发加载，而不是自动
    // 脚本加载后返回全局 Kapa 对象
    use() {
      // 返回全局的 Kapa 对象，供后续使用
      return { Kapa: window.Kapa }
    }
  })

  // 向应用提供 $kapa.openModal 方法
  return {
    // 创建 Nuxt 插件，在应用初始化时加载，通过 provide 向全局注入 $kapa 对象
    provide: {
      kapa: {
        /**
         * 打开 Kapa 弹窗
         * @param q 可选的初始查询词，如果存在则以 "search" 模式打开并提交查询
         */
        async openModal(q?: string) {
          await script.load() // 确保 Kapa 脚本已加载
          const open = await getKapaOpen() // 获取 open 方法

          if (q) {
            // 如果传入了查询词，则以搜索模式打开并自动提交
            return open?.({
              mode: 'search',
              query: q,
              submit: true
            })
          }

          // 默认打开弹窗（不带查询）
          return open?.()
        }
      }
    }
  }
})

/**
 * 等待 Kapa 的 open 方法可用
 * 最多等待 200 次（每次 10ms），防止脚本未完全加载时调用失败
 */
async function getKapaOpen() {
  let i = 0

  do {
    const open = window.Kapa?.open
    if (open) {
      return open
    }
    await new Promise(resolve => setTimeout(resolve, 10)) // 等待 10ms
    i++
  } while (i < 200)
  console.log('couldn\'t load kapa') // 加载失败提示
}
